apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('SharedModule')
            }
        }
        fromPreset(presets.jvm, 'android')
    }
    sourceSets {
        commonMain.dependencies {
            api "org.jetbrains.kotlin:kotlin-stdlib-common:$rootProject.kotlin_version"
            implementation "io.ktor:ktor-client-core:$rootProject.ktorVer"
            implementation "io.ktor:ktor-client-json:$rootProject.ktorVer"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$rootProject.coroutinesVer"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$rootProject.kotlix_serialization"
//
            implementation "org.jetbrains.kotlin:kotlin-serialization:$rootProject.kotlin_version"
        }
        androidMain.dependencies {
            api "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlin_version"
            implementation "io.ktor:ktor-client-android:$rootProject.ktorVer"
            implementation "io.ktor:ktor-client-json-native:$rootProject.ktorVer"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVer"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$rootProject.kotlix_serialization"
        }
        iosMain.dependencies {
            api "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlin_version"
            implementation "io.ktor:ktor-client-ios:$rootProject.ktorVer"
            implementation "io.ktor:ktor-client-core-native:$rootProject.ktorVer"
            implementation "io.ktor:ktor-client-json-native:$rootProject.ktorVer"
//
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$rootProject.coroutinesVer"

            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$rootProject.kotlix_serialization"

        }
    }
}
configurations {
    compileClasspath
}


task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedModule", mode)
    inputs.property "mode", mode
    dependsOn framework.linkTask
    from { framework.outputFile.parentFile }
    into frameworkDir
    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

/*dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

sourceCompatibility = "7"
targetCompatibility = "7"*/
